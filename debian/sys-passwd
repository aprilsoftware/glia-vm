#!/bin/bash
#
# Copyright (C) 2024 April Software S.A.
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#
set -e

help() {
    echo "Usage: $0 [-F HOST_FILE] [HOST1 HOST2 ...]"
    echo
    echo "Options:"
    echo "  -f file    Provide a file containing a list of hosts (one per line)."
    echo "  -h         Display this help message."
    echo
    echo "If -f is not used, provide hosts as command-line arguments."
    exit 1
}

while getopts ":f:h" OPT; do
    case ${OPT} in
        f )
            HOST_FILE="$OPTARG"
            ;;
        h )
            help
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" >&2
            help
            ;;
        : )
            echo "Invalid Option: -$OPTARG requires an argument" >&2
            help
            ;;
    esac
done
shift $((OPTIND -1))

read_file() {
    local FILE="$1"
    if [[ ! -f "$FILE" ]]; then
        echo "Error: File '$FILE' does not exist." >&2
        exit 1
    fi
    mapfile -t HOSTS < "$FILE"
}

read_args() {
    if [[ $# -lt 1 ]]; then
        echo "Error: No hosts provided." >&2
        help
    fi
    HOSTS=("$@")
}

if [[ -n "$HOST_FILE" ]]; then
    read_file "$HOST_FILE"
else
    read_args "$@"
fi

if [[ ${#HOSTS[@]} -eq 0 ]]; then
    echo "Error: Host list is empty." >&2
    help
fi

USER=glia

read -s -p "Enter new password for user '$USER': " USER_PASSWORD
echo

read -s -p "Enter new password for 'root': " ROOT_PASSWORD
echo

copy_ssh_key() {
    local HOST="$1"

    echo "----------------------------------------"
    echo "Setting up SSH key for $HOST"

    if [[ ! -f ~/.ssh/id_rsa.pub ]]; then
        echo "SSH public key not found. Generating one..."
        ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa
    fi

    ssh-copy-id -i ~/.ssh/id_rsa.pub "${USER}@${HOST}"
    if [[ $? -eq 0 ]]; then
        echo "Successfully set up SSH key for $HOST."
        return 0
    else
        echo "Error: Unable to copy SSH key to $HOST."
        return 1
    fi
}

change_passwords() {
    local HOST="$1"
    echo "----------------------------------------"
    echo "Changing passwords on $HOST"

    ssh "${USER}@${HOST}" "echo '$USER:$USER_PASSWORD' | sudo chpasswd" 2>/dev/null
    if [[ $? -ne 0 ]]; then
        echo "Failed to change password for user '$USER' on $HOST." >&2
        return
    else
        echo "Successfully changed password for user '$USER' on $HOST."
    fi

    ssh "${USER}@${HOST}" "echo 'root:$ROOT_PASSWORD' | sudo chpasswd" 2>/dev/null
    if [[ $? -ne 0 ]]; then
        echo "Failed to change password for 'root' on $HOST." >&2
    else
        echo "Successfully changed password for 'root' on $HOST."
    fi
}

echo "Starting SSH key setup on all hosts..."
for HOST in "${HOSTS[@]}"; do
    copy_ssh_key "$HOST"
done

for HOST in "${HOSTS[@]}"; do
    change_passwords "$HOST"
done

echo "----------------------------------------"
echo "Password update process completed."
