#!/bin/bash
#
# Copyright (C) 2023 April Software S.A.
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#
set -e

help()
{
    echo "Usage: buildvm [ -p | --path ]
              [ -n | --name ]
              [ -r | --release ]
              [ -d | --domain ]
              [ -o | --hostname ]
              [ -i | --ip ]
              [ -g | --gateway ]
              [ -l | --nameserver ]
              [ -s | --size ]
              [ -f | --disk-format ]
              [ -a | --ask-root-password ]
              [ -b | --ask-glia-password ]
              [ -p | --packages ]
              [ -u | --users ]
              [ -h | --help]"
    exit 2
}

finish()
{
  sudo umount -l ${BUILD_PATH}/chroot/dev
  sudo umount -l ${BUILD_PATH}/chroot/run
  sudo umount -l ${BUILD_PATH}/chroot

  sudo qemu-nbd --disconnect /dev/nbd0

  if [ -d "${BUILD_PATH}/chroot" ]
  then
      sudo rm -r ${BUILD_PATH}/chroot
  fi

  unset ROOT_PASSWORD GLIA_PASSWORD

  exit $1
}

SHORT=p:,n:,r:,d:,o:,i:,g:,l:,s:,f:,a,b,p::,u::,h
LONG=path:,name:,release:,domain:,hostname:,ip:,gateway:,nameserver:,size:,disk-format:,ask-root-password,ask-glia-password,packages::,users::,help
OPTS=$(getopt --alternative --name buildvm --options $SHORT --longoptions $LONG -- "$@") 

if [ $# -eq 0 ]
then
  help
fi

eval set -- "$OPTS"

while :
do
  case "$1" in
    -p | --path )
      BUILD_PATH="$2"
      shift 2
      ;;
    -d | --name )
      VM_NAME="$2"
      shift 2
      ;;
    -r | --release )
      OS_RELEASE="$2"
      shift 2
      ;;
    -d | --domain )
      VM_DOMAIN="$2"
      shift 2
      ;;
    -h | --hostname )
      VM_HOSTNAME="$2"
      shift 2
      ;;
    -i | --ip )
      VM_IP="$2"
      shift 2
      ;;
    -g | --gateway )
      VM_GATEWAY="$2"
      shift 2
      ;;
    -l | --nameserver )
      VM_NAMESERVER="$2"
      shift 2
      ;;
    -s | --size )
      VM_SIZE="$2"
      shift 2
      ;;
    -f | --disk-format )
      DISK_FORMAT="$2"
      shift 2
      ;;
    -a | --ask-root-password)
      echo -n "ROOT Password: "
      read -s ROOT_PASSWORD
      echo

      if [ -z "${ROOT_PASSWORD}" ]
      then
        echo "Invalid password"

        exit 2
      fi

      shift
      ;;
    -b | --ask-glia-password)
      echo -n "Glia Password: "
      read -s GLIA_PASSWORD
      echo

      if [ -z "${GLIA_PASSWORD}" ]
      then
        echo "Invalid password"

        exit 2
      fi

      shift
      ;;
    -m | --packages )
      PACKAGES="$2"
      shift 2
      ;;
    -u | --users )
      USERS="$2"
      shift 2
      ;;
    -h | --help)
      help
      ;;
    --)
      shift;
      break
      ;;
    *)
      echo "Unexpected option: $1"
      help
      ;;
  esac
done

SCRIPT_DIRECTORY=$(dirname -- $0)

if [ ! -f "${SCRIPT_DIRECTORY}/images/${OS_RELEASE}.sh" ]
then
    echo "Unsupported release"

    exit 1
fi

if [ ! -z "${PACKAGES}" ]
then
  for PACKAGE in $(echo "${PACKAGES}" | grep -o -e '[^[:space:]][^[:space:]]*'); do
      FILE="${SCRIPT_DIRECTORY}/images/lib/packages/${PACKAGE}.sh"

      if [ ! -f "$FILE" ]; then
          echo "Package '${PACKAGE}' not found" >&2
          exit 1
      fi
  done

  OPT_PARAM_3="--packages=\"${PACKAGES}\""
fi

if [ -f "${BUILD_PATH}/${VM_NAME}.img" ]
then
    sudo rm ${BUILD_PATH}/${VM_NAME}.img
fi

if [ -d "${BUILD_PATH}/chroot" ]
then
    sudo rm -r ${BUILD_PATH}/chroot
fi

if [ ! -z "${DISK_FORMAT}" ]
then
  FORMAT="${DISK_FORMAT}"
else
  FORMAT="raw"
fi

sudo qemu-img create -f "${FORMAT}" ${BUILD_PATH}/${VM_NAME}.img $VM_SIZE

sudo modprobe nbd max_part=8

sudo qemu-nbd --connect=/dev/nbd0 \
              --format="${FORMAT}" \
              --cache=none \
              --detect-zeroes=on \
              --aio=native \
              ${BUILD_PATH}/${VM_NAME}.img

trap "finish 1" ERR

sudo parted /dev/nbd0 mklabel msdos

sudo parted /dev/nbd0 mkpart primary 0% 100%

sudo mkfs.ext4 /dev/nbd0p1

mkdir ${BUILD_PATH}/chroot

sudo mount /dev/nbd0p1 ${BUILD_PATH}/chroot

sudo mkdir ${BUILD_PATH}/chroot/boot

if [ -f "${BUILD_PATH}/${OS_RELEASE}.tar.gz" ]; then
    sudo bash -c "cd ${BUILD_PATH}/chroot && tar xzf ${BUILD_PATH}/${OS_RELEASE}.tar.gz"
else
    sudo debootstrap --arch amd64 ${OS_RELEASE} ${BUILD_PATH}/chroot https://deb.debian.org/debian

    sudo bash -c "cd ${BUILD_PATH}/chroot && tar czf ${BUILD_PATH}/${OS_RELEASE}.tar.gz ."
fi

sudo mount --bind /dev ${BUILD_PATH}/chroot/dev
sudo mount --bind /run ${BUILD_PATH}/chroot/run

sudo mkdir -p ${BUILD_PATH}/chroot/usr/local/glia/build

sudo cp -r ${SCRIPT_DIRECTORY}/images/lib ${BUILD_PATH}/chroot/usr/local/glia/build
sudo cp ${SCRIPT_DIRECTORY}/images/${OS_RELEASE}.sh ${BUILD_PATH}/chroot/usr/local/glia/build

if [ ! -z "${ROOT_PASSWORD}" ]
then
  OPT_PARAM_1="--root-password=${ROOT_PASSWORD}"
fi

if [ ! -z "${GLIA_PASSWORD}" ]
then
  OPT_PARAM_2="--glia-password=${GLIA_PASSWORD}"
fi

if [ ! -z "${USERS}" ]
then
  OPT_PARAM_4="--users=\"${USERS}\""
fi

sudo chroot ${BUILD_PATH}/chroot /bin/bash << CHROOT
/usr/local/glia/build/${OS_RELEASE}.sh \
        --domain ${VM_DOMAIN} \
        --hostname ${VM_HOSTNAME} \
        --ip ${VM_IP} \
        --gateway ${VM_GATEWAY} \
        --nameserver ${VM_NAMESERVER} \
        ${OPT_PARAM_1} \
        ${OPT_PARAM_2} \
        ${OPT_PARAM_3} \
        ${OPT_PARAM_4}
CHROOT

sudo rm -r ${BUILD_PATH}/chroot/usr/local/glia/build

finish 0