#!/bin/bash
#
# Copyright (C) 2023 April Software S.A.
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#
set -e

help()
{
    echo "Usage: deployvm [ -p | --path ]
              [ -n | --name ]
              [ -o | --host ]
              [ -d | --pool ]
              [ -v | --vcpus ]
              [ -m | --memory ]
              [ -t | --network ]
              [ -i | --delete-image ]"
    exit 2
}

SHORT=p:,n:,o:,d:,v:,m,:,t:,i,h
LONG=path:,name:,host:,pool:,vcpus:,memory:,network:,delete-image,help
OPTS=$(getopt --alternative --name buildvm --options $SHORT --longoptions $LONG -- "$@") 

if [ $# -eq 0 ]
then
  help
fi

eval set -- "$OPTS"

while :
do
  case "$1" in
    -p | --path )
      BUILD_PATH="$2"
      shift 2
      ;;
    -n | --name )
      VM_NAME="$2"
      shift 2
      ;;
    -o | --host )
      KVM_HOST="$2"
      shift 2
      ;;
    -d | --pool )
      VM_POOL="$2"
      shift 2
      ;;
    -v | --vcpus )
      VM_VCPUS="$2"
      shift 2
      ;;
    -m | --memory )
      VM_MEMORY="$2"
      shift 2
      ;;
    -t | --network )
      VM_NETWORK="$2"
      shift 2
      ;;
    -i | --delete-image )
      DELETE_IMAGE=true
      shift
      ;;
    -h | --help)
      help
      ;;
    --)
      shift;
      break
      ;;
    *)
      echo "Unexpected option: $1"
      help
      ;;
  esac
done

POOL_XML=$(virsh --connect qemu+ssh://${KVM_HOST}/system pool-dumpxml "${VM_POOL}")

POOL_TYPE=$(echo "${POOL_XML}" | xmllint --xpath "string(/pool/@type)" -)

if [ "$POOL_TYPE" == "dir" ]; then
    POOL_PATH=$(echo "$POOL_XML" | xmllint --xpath "string(/pool/target/path)" -)
    scp ${BUILD_PATH}/${VM_NAME}.img ${KVM_HOST}:${POOL_PATH}
    VOLUME=${VM_POOL}/${VM_NAME}.img
elif [ "$POOL_TYPE" == "rbd" ]; then
    rbd --id libvirt import ${BUILD_PATH}/${VM_NAME}.img ${VM_POOL}/${VM_NAME}
    VOLUME=${VM_POOL}/${VM_NAME}
else
    echo "Error: Unsupported pool type '$POOL_TYPE'."
    exit 1
fi

virsh --connect qemu+ssh://${KVM_HOST}/system pool-refresh ${VM_POOL}

virt-install --connect=qemu+ssh://${KVM_HOST}/system \
        --name ${VM_NAME} \
        --vcpus ${VM_VCPUS} \
        --memory ${VM_MEMORY} \
        --disk "vol=${VOLUME}" \
        --import \
        --os-variant debian11 \
        --network network=${VM_NETWORK},model=virtio \
        --graphics spice \
        --noautoconsole \
        --console pty,target_type=serial

if [ "${DELETE_IMAGE}" = true ]
then
  sudo rm ${BUILD_PATH}/${VM_NAME}.img
fi
